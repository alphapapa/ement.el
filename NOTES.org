#+TITLE: Ement.el Notes

* Views

+ [[org-ql-search:tags%3Abug%20%21done%3A?super-groups=%28%28%3Aauto-priority%29%29&sort=%28todo%29&title=%22Bugs%22][org-ql-search: Bugs]]

* Tasks

** TODO Membership events in which nothing seems to change              :bug:

e.g. this one from an event in =#matrix:matrix.org= formats as "Unrecognized", because nothing is changed, so I don't even know what this event is supposed to mean.

#+begin_example elisp
((:id . "$5tsYDxTf8SkJ1J8MLZfV4TtNMdXl3pKkU8T1T6oDszY")
 (:sender . "@key823:setada.de")
 (:content
  (avatar_url . "mxc://setada.de/fGrtYfbbtrvhzPwfdKeCharl")
  (displayname . "key823")
  (membership . "join"))
 (:origin-server-ts . 1657024512875)
 (:type . "m.room.member")
 (:state-key . "@key823:setada.de")
 (:unsigned
  (age . 2297)
  (replaces_state . "$-J4JTEu_WIheqWQUe_1S4oP_D9zgxDS41XsaoKuvLVM")
  (prev_content
   (avatar_url . "mxc://setada.de/fGrtYfbbtrvhzPwfdKeCharl")
   (displayname . "key823")
   (membership . "join"))
  (prev_sender . "@key823:setada.de"))
 (:receipts)
 (:local))
#+end_example

** TODO Render server ACL events
:LOGBOOK:
- State "TODO"       from              [2022-06-13 Mon 17:39]
:END:

e.g.

#+begin_src js
  {
    "content": {
      "allow": [
        "*"
      ],
      "deny": [
        "foo.bar",
        "*.foo.bar"
      ]
    },
    "origin_server_ts": 1655159830066,
    "sender": "@user:server",
    "state_key": "",
    "type": "m.room.server_acl",
    "unsigned": {},
    "event_id": "$foobarbaz",
    "room_id": "!foobar:baz"
  }
#+end_src

** TODO Notifications for "@room" messages

** TODO Prevent "curl interrupted" message from being displayed
:LOGBOOK:
- State "TODO"       from              [2022-10-27 Thu 11:37]
:END:

[2022-10-27 Thu 11:36]  When a read-marker-update request is interrupted by another such request, the user should not see the message about the curl process being interrupted.

** TODO [#C] Make bookmark handler put point at end of room buffers
:LOGBOOK:
CLOCK: [2022-11-18 Fri 17:09]
:END:

When restoring a room buffer bookmark, having point at the top of the buffer isn't very useful, because I almost always want it to be at the bottom so I can follow new messages.

[2022-09-01 Thu 04:04]  Or maybe go to the fully-read marker instead.

[2022-11-18 Fri 17:20] This may not be possible or feasible; see [[file:~/src/emacs/ement.el/ement-room.el::;; TODO: Put point at the end of the room buffer. However, this doesn't seem easy or][comment in ement-room-bookmark-handler]].

** UNDERWAY User avatars
:PROPERTIES:
:ID:       db3393af-6195-419b-aaaa-508cafc07589
:END:

In the =wip/user-avatars= branch, which should be rebased on the =wip/queue-avatars= branch, which should be rebased on =master= and depends on the =plz= queue feature, which is not yet released.  But these pieces already basically work, and it shouldn't take much to polish them up.

** MAYBE Use line-prefix and/or wrap-prefix
:LOGBOOK:
-  State "MAYBE"      from              [2020-12-03 Thu 15:28]
:END:

These could be alternatives to using margins.  See [[info:elisp#Truncation][info:elisp#Truncation]].

** MAYBE Use =persist.el= for saving session data

It's in ELPA, and its code looks good.  Is there any reason not to use it?

** PROJECT [[https://matrix.org/blog/2022/09/29/matrix-v-1-4-release][Spec v1.4 updates]]

** PROJECT [[https://matrix.org/blog/2022/11/17/matrix-v-1-5-release/][Spec v1.5 updates]]
:LOGBOOK:
- State "PROJECT"    from              [2022-11-18 Fri 14:51]
:END:

** PROJECT Backfilling paged events after interrupted sync

e.g. when a system has been asleep for hours and syncs again, there may be more new events in a room than the server is willing to send in a single sync response, causing the response to be paged.  The old events need to be fetched in pages up to the old sync token.

+ [[file:worktrees/spec/matrix-spec-r0.6.1.org::*\[\[#id256\]\[9.4   Syncing\]\]][SPEC: 9.4 Syncing]]

This note from the spec is important:

#+begin_quote
Events are ordered in this API according to the arrival time of the event on the homeserver. This can conflict with other APIs which order events based on their partial ordering in the event graph. This can result in duplicate events being received (once per distinct API called). Clients SHOULD de-duplicate events based on the event ID when this happens.
#+end_quote

[2021-09-24 Fri]  This is done (in =6d772ec=) to a useful extent: after an interrupted sync, rooms are backfilled up to 1,000 events (and that number could be configurable).  Beyond that, a gap would remain, and it would remain unfilled within that Ement session.  (Disconnecting and reconnecting would cause the room history to be cleared and re-fetched from scratch.)

In the long run, a more flexible solution is needed, e.g. something like Element does, where it seems that an event can be fetched, displayed, and then gaps on either side of it are filled on-demand.  Doing that in Emacs with EWOC will probably require some thoughtful design.

** PROJECT Invited rooms
:PROPERTIES:
:ID:       bad4dbe4-4f86-479a-a346-e7d89bf39f92
:END:
:LOGBOOK:
-  State "PROJECT"    from              [2021-08-23 Mon 16:32]
:END:

i.e. showing invitations, not sending them (a separate issue)

*** TODO Make join-room command default to current room in invited-room buffers

*** MAYBE Show room preview for invited rooms
:PROPERTIES:
:ID:       acf07f25-3425-466b-83f6-81fb192f8e17
:END:

Not sure how this is intended to work, e.g. in Element sometimes rooms seem to show a preview in direct rooms, so you can see what someone said before you accept the invitation to the room.  But other times, it seems necessary to join the room first (maybe that's onl for encrypted rooms, which seem to be the default for direct rooms in Element).

*** TODO Notification for invitations
:LOGBOOK:
- State "TODO"       from              [2021-09-30 Thu 20:52]
:END:

*** TODO Sort invited rooms to the top of room list by default
:LOGBOOK:
- State "TODO"       from              [2021-09-30 Thu 20:52]
:END:

*** CANCELED Column in room list for room type
CLOSED: [2021-08-23 Mon 19:22]
:PROPERTIES:
:ID:       a1078833-9637-488c-8fb9-cf989b35e970
:END:

i.e. =j= for joined, =i= for invited, =l= for left, and maybe some others for archived or forgotten, depending on what the spec calls for.

[2021-08-23 Mon 19:22]  Decided that the extra column didn't look nice, and isn't that useful.  Better to just use a different face and topic message for invited rooms.

*** DONE Save room type in struct
CLOSED: [2021-08-23 Mon 19:22]

I don't see a straightforward way to know what a room's type is, other than saving it to a struct slot when processing a sync response, depending on which set of rooms it appears in.

*** DONE Set footer of invited rooms to a clickable link to join the room
CLOSED: [2021-08-23 Mon 19:21]

*** DONE Show invited rooms in rooms list
CLOSED: [2021-08-23 Mon 19:22]

*** DONE Store =invite_state= for invited rooms
CLOSED: [2021-08-23 Mon 19:22]

According to the [[file:worktrees/spec/matrix-spec-r0.6.1.org::#get-_matrixclientr0sync][spec]]:

#+BEGIN_QUOTE
The state of a room that the user has been invited to. These state events may only have the =sender=, =type=, =state_key= and =content= keys present. These events do not replace any state that the client already has for the room, for example if the client has archived the room. Instead the client should keep two separate copies of the state: the one from the =invite_state= and one from the archived =state=. If the client joins the room then the current state will be given as a delta against the archived =state= not the =invite_state=.
#+END_QUOTE

** PROJECT [#B] Multi-room buffer
:LOGBOOK:
-  State "PROJECT"    from "TODO"       [2020-12-02 Wed 14:46]
:END:

Like the "notifications" buffer in ~matrix-client~.

[2021-09-26 Sun 19:56]  Mostly done, but I had some issues with margin text and displaying the room avatar, which I'd like to fix sometime.

** DONE [#A] Submit to ELPA
:LOGBOOK:
- State "DONE"       from "PROJECT"    [2022-09-15 Thu 13:06] \\
  All done!
:END:

*** DONE Ensure no non-ELPA dependencies are needed
:LOGBOOK:
- State "DONE"       from "TODO"       [2022-09-01 Thu 22:56]
- State "TODO"       from              [2022-09-01 Thu 04:01]
:END:

*** DONE Ensure no byte-compilation warnings or errors
:LOGBOOK:
- State "DONE"       from "TODO"       [2022-09-01 Thu 23:10]
- State "TODO"       from              [2022-09-01 Thu 04:02]
:END:

*** DONE Review ELPA submission guidelines
:LOGBOOK:
- State "DONE"       from "TODO"       [2022-09-01 Thu 23:21]
- State "TODO"       from              [2022-09-01 Thu 04:03]
:END:

*** DONE Tag stable version number
:LOGBOOK:
- State "DONE"       from "TODO"       [2022-09-01 Thu 23:22]
- State "TODO"       from              [2022-09-01 Thu 04:02]
:END:

- [X] In ement.el header
- [X] In Git

*** DONE Write patch for elpa.git
:LOGBOOK:
- State "DONE"       from "TODO"       [2022-09-01 Thu 23:41]
- State "TODO"       from              [2022-09-01 Thu 04:03]
:END:

*** DONE Send email to emacs-devel
:LOGBOOK:
- State "DONE"       from "TODO"       [2022-09-01 Thu 23:41]
- State "TODO"       from              [2022-09-01 Thu 04:03]
:END:

*** DONE Check feedback on emacs-devel
:LOGBOOK:
- State "DONE"       from "WAITING"    [2022-09-05 Mon 04:52]
- State "WAITING"    from              [2022-09-01 Thu 23:41]
:END:

*** DONE Ensure readme change allows ELPA to build properly
:LOGBOOK:
- State "DONE"       from "WAITING"    [2022-09-15 Thu 13:06]
- State "WAITING"    from              [2022-09-05 Mon 04:52]
:END:

Need to check ELPA-devel after it's had a chance to build again.

*** DONE Tag version with readme fix
:LOGBOOK:
- State "DONE"       from "TODO"       [2022-09-15 Thu 13:06]
:END:

So it will get built for main ELPA.

** DONE [#A] Apply new room state events                                :bug:
:LOGBOOK:
- State "DONE"       from "PROJECT"    [2021-09-27 Mon 00:56]
-  State "PROJECT"    from              [2020-12-05 Sat 16:11]
:END:

[2020-12-05 Sat 16:11]  I made a new room, =#ement.el:matrix.org=, but the room is listed in this client without a name, alias, topic, etc.  In the room buffer, I see these events:

#+BEGIN_EXAMPLE
@alphapapa:matrix.org
[sender:@alphapapa:matrix.org type:m.room.create]
 (join)
[sender:@alphapapa:matrix.org type:m.room.power_levels]
[sender:@alphapapa:matrix.org type:m.room.canonical_alias]
[sender:@alphapapa:matrix.org type:m.room.join_rules]
[sender:@alphapapa:matrix.org type:m.room.history_visibility]
[sender:@alphapapa:matrix.org type:m.room.name]
[sender:@alphapapa:matrix.org type:m.room.topic]
#+END_EXAMPLE

I guess, for some reason, the server isn't sending the same initial state data, so we need to apply the room state events as they come in.  This is also necessary for when those things are changed during a session.

** DONE [#A] Room list buffer
:LOGBOOK:
- State "DONE"       from "PROJECT"    [2021-09-27 Mon 00:56]
-  State "PROJECT"    from "TODO"       [2020-12-02 Wed 14:46]
:END:

Probably using ~tabulated-list-mode~.

** DONE [#A] Avoid passing URL params on command line
:LOGBOOK:
- State "DONE"       from "PROJECT"    [2021-09-25 Sat 01:13]
-  State "PROJECT"    from              [2020-12-02 Wed 22:58]
:END:

There seem to be two options: pass the URL on the command line, or pass it in a temp file.  Either way is bad: the command line makes it visible to all users (AFAIK), and temp files are messy, could be left behind, clutter the disk, etc.

Curl has so many options that I was hoping for a way to pass the URL via STDIN, and there is, but that appears to preclude the passing of other data via STDIN.  I found [[https://curl.se/mail/archive-2003-08/0099.html][this mailing list thread from 2003]] where Rich Gray asks for this very feature, but Daniel Stenberg shoots down the idea:

#+BEGIN_QUOTE
While you of course are 100% correct, I fail to see why curl has to do all this by itself. This kind of magic will only be attempted by people who are using unix(-like) operating systems and if you sit in front of a unix box, it would be dead easy to write a wrapper script around curl that hides all the arguments quite nicely already, right?

The same goes for your idea of being able to read from specific file handle numbers.

I don't think adding these features would benefit more than a few unix hackers (most likely wearing beards! ;-O), who already know how to overcome the problems they fix.
#+END_QUOTE

In fact, writing a wrapper script does not help at all: how horribly hacky and messy it would be to /write a shell script to the disk every time I want to call curl from Emacs/.

[2021-09-24 Fri]  This is done in =plz= now.

** DONE [#A] Subsequent syncs overwrite prev-batch token               :bug:
CLOSED: [2020-12-05 Sat 00:13]
:LOGBOOK:
-  State "DONE"       from "TODO"       [2020-12-05 Sat 00:13]
:END:

Which breaks loading of older messages and causes dupes in the list as attempts are made to load older messages.

** DONE Only generated room avatars shown in newly renamed taxy-based room list :bug:
:PROPERTIES:
:milestone: 0.5
:END:
:LOGBOOK:
- State "DONE"       from "TODO"       [2022-11-18 Fri 17:22] \\
  Fixed in cc97d0eca7e9023631f37c0ae61de1fe628ac87b.
- State "TODO"       from              [2022-10-27 Thu 08:21]
:END:

[2022-10-27 Thu 08:21]  I just noticed that the room list sidebar is only showing generated room avatars.  Probably made a mistake when renaming cache variables or something.

** DONE Room search/discovery
:LOGBOOK:
- State "DONE"       from "PROJECT"    [2022-11-18 Fri 17:08] \\
  Done enough to call done.  Minor tweaks to be done are in source comments.
- State "PROJECT"    from              [2022-09-22 Thu 12:28]
:END:

+ [[file:~/src/emacs/ement.el/worktrees/spec/matrix-spec-r0.6.1.org::#listing-rooms][Spec § 10.5]]

+ Uses pagination in batches with tokens.  Will need, e.g. scrolling to load more batches.
+ Can use ~GET~ request to list all public rooms, or ~POST~ with a filter to search.
+ Library name: ~ement-directory~?  Seems good.

Example results from posting a query for ~Emacs~:

#+begin_example elisp
  ((chunk .
          [((room_id . "!PWxnIIDhCBAbNItsSN:matrix.org")
            (name . "Emacs")
            (topic . "Version 27.1 of the Emacs text editor is now available.\nhttps://www.mail-archive.com/info-gnu@gnu.org/msg02771.html")
            (canonical_alias . "#emacs:matrix.org")
            (num_joined_members . 2304)
            (avatar_url . "mxc://matrix.org/NoWxwvjEwNIyaEgxpYqsrnHq")
            (world_readable . :json-false)
            (guest_can_join . :json-false)
            (join_rule . "public"))
           ((room_id . "!WfZsmtnxbxTdoYPkaT:greyface.org")
            (name . "Emacs")
            (topic . "The extensible self-documenting editor | See #emacs-space:matrix.org for related rooms | Latest version: 28.1 (stable) 29.0 (git) | \"A sort of hybrid between Windows Notepad, a monolithic-kernel operating system, and the International Space Station.\"")
            (canonical_alias . "#emacs:matrix.org")
            (num_joined_members . 1498)
            (avatar_url . "mxc://greyface.org/lNEcxgazHIswRbnQSeuOadrU")
            (world_readable . t)
            (guest_can_join . :json-false)
            (join_rule . "public"))
           ((room_id . "!gLamGIXTWBaDFfhEeO:matrix.org")
            (name . "Emacs")
            (topic . "The extensible editor | This is a \"Space\". Join #emacs:matrix.org if your client doesn't support Spaces | Invite link: https://matrix.to/#/#emacs-space:matrix.org")
            (canonical_alias . "#emacs-space:matrix.org")
            (num_joined_members . 311)
            (avatar_url . "mxc://hpdeifel.de/jYocEApVFKBEszYyJKMtuFVV")
            (world_readable . t)
            (guest_can_join . t)
            (join_rule . "public")
            (room_type . "m.space"))
           ((room_id . "!ZrZoyXEyFrzcBZKNis:matrix.org")
            (name . "Emacs Matrix Client")
            (topic . "Being obsoleted by new client, Ement.el: https://github.com/alphapapa/ement.el (#ement.el:matrix.org)")
            (canonical_alias . "#matrix-client.el:matrix.org")
            (num_joined_members . 222)
            (avatar_url . "mxc://matrix.org/lntwXRiVZrGpYhKpDdfvUrvt")
            (world_readable . t)
            (guest_can_join . :json-false)
            (join_rule . "public"))
           ((room_id . "!NicAJNwJawmHrEhqZs:matrix.org")
            (name . "Ement.el")
            (topic . "Ement.el, a Matrix client for Emacs. | https://github.com/alphapapa/ement.el")
            (canonical_alias . "#ement.el:matrix.org")
            (num_joined_members . 218)
            (avatar_url . "mxc://matrix.org/WEnCCdftGDmhnmoSXjMfmrtA")
            (world_readable . t)
            (guest_can_join . :json-false)
            (join_rule . "public"))
           ((room_id . "!iYvzIBgMwMkPycYlUK:matrix.org")
            (name . "Vim and Emacs")
            (topic . "Discussions about the very extensible text editors that are Vim and Emacs.  Other DistroTube Rooms: https://matrix.to/#/!AnJpfYMpaCdwEFxNku:matrix.org?via=matrix.org&via=halogen.city&via=nitro.chat")
            (canonical_alias . "#vim-and-emacs:matrix.org")
            (num_joined_members . 193)
            (avatar_url . "mxc://matrix.org/XobRQvAYGWPrlkcOLzJsMIWs")
            (world_readable . t)
            (guest_can_join . :json-false)
            (join_rule . "public"))
           ((room_id . "!ATlUgvjlsacatlDFfW:matrix.org")
            (name . "Emacs 中文 OT")
            (topic . "emacs china ot")
            (canonical_alias . "#emacszhot:matrix.org")
            (num_joined_members . 141)
            (avatar_url . "mxc://matrix.org/guIQEJjpvnxGaNWeXivSqaLO")
            (world_readable . t)
            (guest_can_join . :json-false)
            (join_rule . "public"))
           ((room_id . "!KfjwwEBOmlsCMcWdpM:matrix.org")
            (name . "scalameta/emacs-users")
            (topic . "Discord bridge for scalameta/emacs-users")
            (canonical_alias . "#scalameta/emacs-users:matrix.org")
            (num_joined_members . 117)
            (avatar_url . "mxc://matrix.org/yrxsjgixehGfqwNLndnogotW")
            (world_readable . t)
            (guest_can_join . :json-false)
            (join_rule . "public"))
           ((room_id . "!DxeJBXycEuvYNNFdes:matrix.org")
            (name . "Org-roam")
            (topic . "Org roam, a plain-text personal knowledge management system for Org-mode on Emacs. https://www.orgroam.com")
            (canonical_alias . "#orgroam:matrix.org")
            (num_joined_members . 64)
            (avatar_url . "mxc://matrix.org/NhFqbmIVzorgmQcVrCoHfSXR")
            (world_readable . t)
            (guest_can_join . :json-false)
            (join_rule . "public"))
           ((room_id . "!ouhZvSHeefKUXWcfFp:matrix.org")
            (name . "Emacs en Español")
            (canonical_alias . "#emacs-es:matrix.org")
            (num_joined_members . 59)
            (avatar_url . "mxc://matrix.org/gCKGPuuKxpctknmONEbvmJKO")
            (world_readable . :json-false)
            (guest_can_join . :json-false)
            (join_rule . "public"))
           ((room_id . "!SZqazSISJmcpmLMdkf:matrix.org")
            (name . "spacemacs")
            (topic . "https://www.spacemacs.org/")
            (canonical_alias . "#spacemacs:matrix.org")
            (num_joined_members . 52)
            (world_readable . :json-false)
            (guest_can_join . :json-false)
            (join_rule . "public"))
           ((room_id . "!XDsXVgaKjCKPQqYgUs:halogen.city")
            (name . "Ἀκαδημία Gentoo/Lisp")
            (topic . "Emacs / Lisp / Freebsd / free software / gentoo ")
            (canonical_alias . "#akademia:halogen.city")
            (num_joined_members . 47)
            (avatar_url . "mxc://halogen.city/3bb3a77b8f0c57b25f00762148c975369ec2fb29")
            (world_readable . :json-false)
            (guest_can_join . :json-false)
            (join_rule . "public"))
           ((room_id . "!YDSkoDOlqvzDWjeksw:matrix.org")
            (name . "Doom Emacs")
            (topic . "The \"official\" room is  #doomemacs:matrix.org, this doomed one is just for announcing that and some random discussions. For actual official support, access https://discourse.doomemacs.org")
            (canonical_alias . "#doomedemacs:matrix.org")
            (num_joined_members . 35)
            (avatar_url . "mxc://matrix.org/VpGeKcJGzvDTtMPBlbBiMEBQ")
            (world_readable . :json-false)
            (guest_can_join . :json-false)
            (join_rule . "public"))
           ((room_id . "!uAQghkAzxsPADEXSai:matrix.org")
            (name . "M-x Erlangen")
            (topic . "Emacs Meetup in Erlangen, Germany \nMeetup: https://m-x-erlangen.gitlab.io/\nMailing: https://www.freelists.org/list/m-x-erlangen\nGitlab-orga: https://gitlab.com/m-x-erlangen")
            (canonical_alias . "#m-x-erlangen:matrix.org")
            (num_joined_members . 25)
            (avatar_url . "mxc://matrix.org/HlMXYGsYWLlPTIGQKjvMpScc")
            (world_readable . :json-false)
            (guest_can_join . :json-false)
            (join_rule . "public"))
           ((room_id . "!ZRlegTABLpSBbvsMmN:matrix.org")
            (name . "mastodon.el")
            (topic . "Emacs client for Mastodon, the federate microblogging service. Discuss development, ask for help, etc.")
            (canonical_alias . "#mastodon.el:matrix.org")
            (num_joined_members . 18)
            (world_readable . :json-false)
            (guest_can_join . :json-false)
            (join_rule . "public"))
           ((room_id . "!sIztkbqKvLTRRWvQjA:matrix.org")
            (name . "emacs_fr")
            (topic . "emacs en francais. quelques ressources :\n\nhttps://www.emacswiki.org/emacs?interface=fr\nhttp://www.emacs-doctor.com section francophone\n")
            (canonical_alias . "#emacs_fr:matrix.org")
            (num_joined_members . 15)
            (world_readable . :json-false)
            (guest_can_join . :json-false)
            (join_rule . "public"))
           ((room_id . "!hjaQobefpGqHTuqetX:matrix.org")
            (name . "Modo Emacs")
            (topic . "Comunidade brasileira e grupo de estudos sobre o GNU Emacs")
            (canonical_alias . "#modoemacs:matrix.org")
            (num_joined_members . 15)
            (avatar_url . "mxc://matrix.org/aPVXrOblZzLQcqIBNxnwjZgz")
            (world_readable . :json-false)
            (guest_can_join . :json-false)
            (join_rule . "public"))
           ((room_id . "!RBEtaOIdTqOavwqBFg:matrix.org")
            (name . "Emacs.el")
            (topic . "Emacs podcast | https://emacsel.com")
            (canonical_alias . "#emacsel:matrix.org")
            (num_joined_members . 15)
            (avatar_url . "mxc://matrix.org/fTTdVDqmHrqcxTHdQcNAbyTY")
            (world_readable . :json-false)
            (guest_can_join . :json-false)
            (join_rule . "public"))
           ((room_id . "!QdMjOBGcNMjmTPvAAS:matrix.org")
            (name . "Emacs Matrix Client Dev")
            (topic . "Development Alerts and overflow discussion for matrix-client.el")
            (canonical_alias . "#matrix-client-el-dev:matrix.org")
            (num_joined_members . 14)
            (avatar_url . "mxc://matrix.org/WvUmXMnylxCDbJmFZnKwkJah")
            (world_readable . t)
            (guest_can_join . :json-false)
            (join_rule . "public"))
           ((room_id . "!EfKQCTaHsinIhngVVD:matrix.org")
            (name . "EXWM")
            (topic . "Matrix server for EXWM (Emacs X Window Manager)")
            (canonical_alias . "#exwm:matrix.org")
            (num_joined_members . 12)
            (world_readable . :json-false)
            (guest_can_join . :json-false)
            (join_rule . "public"))
           ((room_id . "!NmoBUioPVyMqSyTSHv:matrix.org")
            (name . "#remacs")
            (num_joined_members . 11)
            (world_readable . :json-false)
            (guest_can_join . :json-false)
            (join_rule . "public"))
           ((room_id . "!EkDLwNwPNLHaEXoJbR:matrix.org")
            (name . "emacs-vienna")
            (topic . "Emacs users in Vienna")
            (canonical_alias . "#emacs-vienna:matrix.org")
            (num_joined_members . 11)
            (avatar_url . "mxc://matrix.org/jFTDjCvoJbDuHDsLduvglIOA")
            (world_readable . t)
            (guest_can_join . :json-false)
            (join_rule . "public"))
           ((room_id . "!TDEaJCaCPzkeIyZfVY:matrix.org")
            (name . "general")
            (topic . "ку здарова(hi hello), обсуждаем ubuntu, debian, linux mint, arch, artix, gentoo, void, alpine, manjaro, fedora, red hat, centos, zorin os, android, crux, kiss linux, mx linux, parabola/hyperbola, trisquel, pureos, opensuse, devuan, vim, emacs, bash, zsh, kde, mate, gnome, firefox, librewolf, chromium, suckless, templeos, ksh, fish, cinnamon, odysee, peertube, monero, gnu taler, luke smith, terry davis, ext4, btrfs, xorg x11, wayland, unity, C, holyC, java, rust, golang, 4chan, 2ch, intel, amd, software короче норм всё у нас. Welcome to the club\nдискорд сервер(для одиноких милф): https://discord.gg/QMg7ANE6ZB (((discord server)))")
            (canonical_alias . "#closedopensourcegeneral:matrix.org")
            (num_joined_members . 10)
            (avatar_url . "mxc://matrix.org/JoMDABpisqcQapjnfdmumFvU")
            (world_readable . t)
            (guest_can_join . t)
            (join_rule . "public"))
           ((room_id . "!uhvlfdBsrxlqczpkzn:matrix.org")
            (name . "Old hxrs only")
            (topic . "emacs vs vim; spacemacs vs nvim; nixos vs guix; gtfoml")
            (canonical_alias . "#oldhax:matrix.org")
            (num_joined_members . 9)
            (world_readable . :json-false)
            (guest_can_join . t)
            (join_rule . "public"))
           ((room_id . "!dQtuDpMVNPuRHartFL:matrix.org")
            (name . "#emacs")
            (topic . "気 of Text")
            (canonical_alias . "#ki-emacs:matrix.org")
            (num_joined_members . 7)
            (avatar_url . "mxc://matrix.org/qaItgwHItJLLuFsFtFanKqCO")
            (world_readable . :json-false)
            (guest_can_join . :json-false)
            (join_rule . "public"))
           ((room_id . "!LyTwlPbHJJPtkmrnRL:matrix.org")
            (name . "Church of Emacs")
            (topic . "Join us now and share the software;")
            (canonical_alias . "#churchofemacs:matrix.org")
            (num_joined_members . 7)
            (avatar_url . "mxc://matrix.org/QfhuUKfTeyDgoHMxPiFnIQrm")
            (world_readable . :json-false)
            (guest_can_join . :json-false)
            (join_rule . "public"))
           ((room_id . "!UFcxFGqXYvNLStDDJq:matrix.org")
            (name . "org-ql")
            (topic . "org-ql, a query library for Emacs Org mode.  |  https://github.com/alphapapa/org-ql")
            (canonical_alias . "#org-ql:matrix.org")
            (num_joined_members . 4)
            (world_readable . :json-false)
            (guest_can_join . :json-false)
            (join_rule . "public"))
           ((room_id . "!EbCrgZZbslOMlBKPHL:matrix.org")
            (name . "emacs-chicago")
            (topic . "https://www.meetup.com/emacs-chicago/")
            (num_joined_members . 4)
            (world_readable . t)
            (guest_can_join . :json-false)
            (join_rule . "public"))
           ((room_id . "!AUlvJdslEhNzHnpKNz:matrix.org")
            (name . "ชาว Emacs")
            (canonical_alias . "#emacs-thai:matrix.org")
            (num_joined_members . 3)
            (world_readable . t)
            (guest_can_join . :json-false)
            (join_rule . "public"))
           ((room_id . "!sYaPjSZsVrUBoChwtB:matrix.org")
            (name . "Emacs_ru")
            (canonical_alias . "#emacs_ru:matrix.org")
            (num_joined_members . 2)
            (world_readable . :json-false)
            (guest_can_join . t)
            (join_rule . "public"))
           ((room_id . "!lbpfYlxxynLRienQhA:matrix.org")
            (name . "susam")
            (topic . "Support for https://mathb.in/ and other projects from https://github.com/susam offered here | Lisp, Emacs, mathematics, computer science, etc. are on topic here.")
            (canonical_alias . "#susam:matrix.org")
            (num_joined_members . 2)
            (avatar_url . "mxc://matrix.org/gQtFeBwkbOgnfLSqPicqNVpS")
            (world_readable . :json-false)
            (guest_can_join . :json-false)
            (join_rule . "public"))
           ((room_id . "!YONPqUkzGjPMTAYTOH:matrix.org")
            (name . "Emacs-Tech")
            (topic . "Emacs (tech-only discussion)")
            (canonical_alias . "#emacs-tech:matrix.org")
            (num_joined_members . 2)
            (world_readable . :json-false)
            (guest_can_join . :json-false)
            (join_rule . "public"))
           ((room_id . "!TcFNvuWLSgAEARjDil:matrix.org")
            (name . "Emacs Україна")
            (topic . "Emacs та Emacs Lisp українською")
            (canonical_alias . "#emacs.ua:matrix.org")
            (num_joined_members . 2)
            (avatar_url . "mxc://matrix.org/jsEfZeKljasfEPioCDedOuYz")
            (world_readable . :json-false)
            (guest_can_join . :json-false)
            (join_rule . "public"))
           ((room_id . "!FeazkXMkkoGnqjAynW:matrix.org")
            (name . "gettext")
            (topic . " Usually, programs are written and documented in English, and use English at execution time for interacting with users. This is true not only from within GNU, but also in a great deal of proprietary and free software. Using a common language is quite handy for communication between developers, maintainers and users from all countries. On the other hand, most people are less comfortable with English than with their own native language, and would rather be using their mother tongue for day to day's work, as far as possible. Many would simply love seeing their computer screen showing a lot less of English, and far more of their own language.  GNU gettext is an important step for the GNU Translation Project, as it is an asset on which we may build many other steps. This package offers to programmers, translators, and even users, a well integrated set of tools and documentation. Specifically, the GNU gettext utilities are a set of tools that provides a framework to help other GNU packages produce multi-lingual messages. These tools include a set of conventions about how programs should be written to support message catalogs, a directory and file naming organization for the message catalogs themselves, a runtime library supporting the retrieval of translated messages, and a few stand-alone programs to massage in various ways the sets of translatable strings, or already translated strings. A special GNU Emacs mode also helps interested parties in preparing these sets, or bringing them up to date. ")
            (canonical_alias . "#gettext:matrix.org")
            (num_joined_members . 2)
            (world_readable . :json-false)
            (guest_can_join . :json-false)
            (join_rule . "public"))
           ((room_id . "!nbCHsVVEJqLJeEaczC:matrix.org")
            (name . "TOPIC: emacs;")
            (canonical_alias . "#emacsw:matrix.org")
            (num_joined_members . 1)
            (avatar_url . "mxc://matrix.org/aKCLVachcKxdgwfkLYPjQqfo")
            (world_readable . t)
            (guest_can_join . :json-false)
            (join_rule . "public"))
           ((room_id . "!dCJtTxkqImkHuWEiTE:matrix.org")
            (name . "Lounge")
            (canonical_alias . "#doomemacs-lounge:matrix.org")
            (num_joined_members . 1)
            (world_readable . t)
            (guest_can_join . :json-false)
            (join_rule . "public"))
           ((room_id . "!KGZkfiLyEzFMlZJUwC:matrix.org")
            (name . "#remacs")
            (num_joined_members . 1)
            (world_readable . :json-false)
            (guest_can_join . :json-false)
            (join_rule . "public"))
           ((room_id . "!JLTrOGTkZtbwQCaoBu:matrix.org")
            (name . "#emacs:chat.freenode.net")
            (num_joined_members . 1)
            (world_readable . :json-false)
            (guest_can_join . t)
            (join_rule . "public"))
           ((room_id . "!IVadYutvKcolNGTMOm:matrix.org")
            (name . "Emacs Test")
            (canonical_alias . "#metrowind-test-emacs:matrix.org")
            (num_joined_members . 1)
            (world_readable . :json-false)
            (guest_can_join . t)
            (join_rule . "public"))])
   (total_room_count_estimate . 63360))
#+end_example

** DONE Propagating replying-to data through compose buffers           :bug:
:LOGBOOK:
- Note taken on [2022-11-17 Thu 16:51] \\
  Got interrupted by some phone calls, so it didn't actually take this long.
- State "DONE"       from "TODO"       [2022-11-17 Thu 16:50]
CLOCK: [2022-11-17 Thu 14:53]--[2022-11-17 Thu 16:50] =>  1:57
:END:



** DONE Fix/rewrite read receipts
:LOGBOOK:
- State "DONE"       from "TODO"       [2022-09-19 Mon 15:09]
- State "TODO"       from              [2022-09-15 Thu 13:06]
:END:

To fix/rewrite read receipt sending, we'll need to make sure that a room can only have one outstanding read-receipt update request, and that an update request for the same position can't be repeated successively.  So:

1. [X] Add a buffer-local room variable, an alist (of one entry) mapping an event ID to the plz request setting the read receipt to after that event.  ~ement-room-read-receipt-request~
2. [X] The read-receipt-updating function should compare the event ID to the one in that variable: if they match, do nothing; if they're different, cancel any outstanding request and send a new one, and set the variable accordingly.
3. [ ] In addition to using ~window-scroll-functions~ (which I hope we can get away with, after these other changes), we'll use ~window-selection-change-functions~ to also update the read receipt, similarly to Element (i.e. clicking in a room window should update the receipt with an idle timer).

[2022-09-15 Thu 13:42] Again, seeing a very weird behavior in which the read-receipt-timer function is sometimes called repeatedly by Emacs after the idle timer is first called, instead of being called once per idleness.  I don't know why; my best guess is that the ~window-scroll-functions~ are being called repeatedly (though I don't know why), rather than that the timer-called function is being called directly.  To test, I'm going to add a function to one of the room buffer's ~window-scroll-functions~ to just print a message when called.

#+begin_src elisp
  (defun argh/window-scroll-functions-debug-message (&rest args)
    (message "argh/debug-window-scroll-functions: Called with: %S" args))

  (defun argh/window-scroll-functions-add-debug-fn ()
    (setq-local window-scroll-functions
                (cons 'argh/window-scroll-functions-debug-message window-scroll-functions)))
#+end_src

[2022-09-15 Thu 13:47] Wow, after doing that and observing the problem happening, Emacs suddenly crashed while calling the functions infinitely:

#+begin_example
  Fatal error 6: Aborted
  Backtrace:
  /home/me/.guix-profile/bin/emacs-28.1.50[0x52771b]
  /home/me/.guix-profile/bin/emacs-28.1.50[0x424640]
  /home/me/.guix-profile/bin/emacs-28.1.50[0x424b02]
  /home/me/.guix-profile/bin/emacs-28.1.50[0x421ec0]
  /home/me/.guix-profile/bin/emacs-28.1.50[0x48214b]
  /home/me/.guix-profile/bin/emacs-28.1.50[0x587ce4]
  /home/me/.guix-profile/bin/emacs-28.1.50[0x445411]
  /home/me/.guix-profile/bin/emacs-28.1.50[0x4453d0]
  /home/me/.guix-profile/bin/emacs-28.1.50[0x4453d0]
  /home/me/.guix-profile/bin/emacs-28.1.50[0x4453d0]
  /home/me/.guix-profile/bin/emacs-28.1.50[0x46e72d]
  /home/me/.guix-profile/bin/emacs-28.1.50[0x4707e0]
  /home/me/.guix-profile/bin/emacs-28.1.50[0x5d6fef]
  /home/me/.guix-profile/bin/emacs-28.1.50[0x436a50]
  /home/me/.guix-profile/bin/emacs-28.1.50[0x51b74a]
  /home/me/.guix-profile/bin/emacs-28.1.50[0x51baef]
  /home/me/.guix-profile/bin/emacs-28.1.50[0x51d49e]
  /home/me/.guix-profile/bin/emacs-28.1.50[0x587c57]
  /home/me/.guix-profile/bin/emacs-28.1.50[0x50e20a]
  /home/me/.guix-profile/bin/emacs-28.1.50[0x587bb1]
  /home/me/.guix-profile/bin/emacs-28.1.50[0x50e1af]
  /home/me/.guix-profile/bin/emacs-28.1.50[0x51395c]
  /home/me/.guix-profile/bin/emacs-28.1.50[0x513ca3]
  /home/me/.guix-profile/bin/emacs-28.1.50[0x42c3fa]
  /gnu/store/5h2w4qi9hk1qzzgi1w83220ydslinr4s-glibc-2.33/lib/libc.so.6(__libc_start_main+0xcd)[0x7f78d70197dd]
  /home/me/.guix-profile/bin/emacs-28.1.50[0x42ca6a]
  /home/me/.bin/with-emacs: line 215: 10034 Aborted                 (core dumped) "$emacs" "${emacs_args[@]}"
#+end_example

That suggests to me that there may be a bug in Emacs itself happening here.  Debugging that would probably not be fun.  I'm not even sure exactly how to reproduce it.  So far, it seems to happen when two windows have one of these functions in their buffers' local values of ~window-scroll-functions~, and when a window (maybe any window) is scrolled.

But it doesn't happen every time, and it doesn't crash Emacs every time.  And when the functions are being called in rapid succession, Emacs remains responsive, and clicking in a window interrupts Emacs's idleness and the function-calling stops.

That seems to suggest that an interaction with the idle timers is part of the problem, because I know that calling ~run-with-idle-timer~ when Emacs is already idle for the given length of time causes the timer to run immediately, which would seem to match with the behavior I'm seeing.  The question that remains is why the ~window-scroll-functions~ are being called repeatedly rather than once per scroll event.

I guess I should try to make an ECM...

#+begin_src elisp
  (defun argh/window-scroll-functions-debug-message (&rest args)
    (message "argh/debug-window-scroll-functions: Called with: %S" args))

  (defun argh/window-scroll-functions-add-debug-fn ()
    (setq-local window-scroll-functions
                (cons 'argh/window-scroll-functions-debug-message window-scroll-functions)))

  (defun argh/window-scroll-functions-ecm ()
    (let ((buffer1 (get-buffer-create "ARGH: Buffer 1"))
          (buffer2 (get-buffer-create "ARGH: Buffer 2")))
      (dolist (buffer (list buffer1 buffer2))
        (with-current-buffer buffer
          (argh/window-scroll-functions-add-debug-fn)))
      (switch-to-buffer buffer1)
      (split-window-horizontally)
      (switch-to-buffer buffer2)
      (split-window-vertically)
      (view-echo-area-messages)))
#+end_src

After calling the last function, the user should try scrolling one of the windows and see if the functions are called infinitely.

Okay, that doesn't cause it.  So I need to try to use an idle timer as well...

#+begin_src elisp
  (defvar-local argh/window-scroll-functions-timer nil)

  (defun argh/window-scroll-functions-run-idle-timer (&rest args)
    (when (timerp argh/window-scroll-functions-timer)
      (cancel-timer argh/window-scroll-functions-timer))
    (setf argh/window-scroll-functions-timer
          (run-with-idle-timer 3 nil #'argh/window-scroll-functions-debug-message
                               "From idle timer" (current-buffer))))

  (defun argh/window-scroll-functions-debug-message (&rest args)
    (message "argh/debug-window-scroll-functions: Called with: %S" args))

  (defun argh/window-scroll-functions-add-debug-fn ()
    (setq-local window-scroll-functions
                (cons 'argh/window-scroll-functions-debug-message window-scroll-functions))
    (setq-local window-scroll-functions
                (cons 'argh/window-scroll-functions-run-idle-timer window-scroll-functions)))

  (defun argh/window-scroll-functions-ecm ()
    (let ((buffer1 (get-buffer-create "ARGH: Buffer 1"))
          (buffer2 (get-buffer-create "ARGH: Buffer 2")))
      (dolist (buffer (list buffer1 buffer2))
        (with-current-buffer buffer
          (argh/window-scroll-functions-add-debug-fn)))
      (switch-to-buffer buffer1)
      (split-window-horizontally)
      (switch-to-buffer buffer2)
      (split-window-vertically)
      (view-echo-area-messages)))
#+end_src

I still can't reproduce the problem.  I did observe something strange, though: with these three windows open, sometimes the message buffer doesn't update to show the new debug messages until its own window is scrolled.  I don't know if that could be related to the problem.

[2022-09-15 Thu 14:19]  I reproduced the problem with Ement and made Emacs crash again, but still not with the ECM.  Let's try changing the debug functions to also insert some text into each buffer, which might cause a redisplay-calling-window-scroll-functions loop...?

#+begin_src elisp
  (defvar-local argh/window-scroll-functions-timer nil)

  (defun argh/window-scroll-functions-run-idle-timer (&rest args)
    (when (timerp argh/window-scroll-functions-timer)
      (cancel-timer argh/window-scroll-functions-timer))
    (setf argh/window-scroll-functions-timer
          (run-with-idle-timer 3 nil #'argh/window-scroll-functions-timer
                               (current-buffer))))

  (defun argh/window-scroll-functions-debug-message (window pos &rest rest)
    (message "argh/debug-window-scroll-functions: Called in:%S  AT:%S  WITH:%S"
             window pos rest))

  (defun argh/window-scroll-functions-timer (buffer)
    (with-current-buffer buffer
      (message "argh/window-scroll-functions-timer Called in:%S" buffer)
      (save-excursion
        (goto-char (point-max))
        (insert "\n" (format-time-string "%s")))))

  (defun argh/window-scroll-functions-add-debug-fn ()
    (setq-local window-scroll-functions
                (cons 'argh/window-scroll-functions-debug-message window-scroll-functions))
    (setq-local window-scroll-functions
                (cons 'argh/window-scroll-functions-run-idle-timer window-scroll-functions)))

  (defun argh/window-scroll-functions-ecm ()
    (let ((buffer1 (get-buffer-create "ARGH: Buffer 1"))
          (buffer2 (get-buffer-create "ARGH: Buffer 2")))
      (dolist (buffer (list buffer1 buffer2))
        (with-current-buffer buffer
          (argh/window-scroll-functions-add-debug-fn)))
      (switch-to-buffer buffer1)
      (split-window-horizontally)
      (switch-to-buffer buffer2)
      (split-window-vertically)
      (view-echo-area-messages)))
#+end_src

Nope, can't get the ECM to reproduce the problem.  /sigh/

[2022-09-15 Thu 15:26] Just made this WIP commit: 3569c1d2b5251061eb1415a7849039ff0f6f3c2a

#+begin_quote
WIP: See comment

Well, this reproduces the problem fairly reliably in my config in
that, after connecting, it begins calling the
ement-room-start-read-receipt-timer function infinitely.  Sometimes I
can interrupt it by selecting one or another room window and scrolling
it or moving point in it.  I have no explanation for why the function
is called infinitely; the only entry point into it is in the room
buffers' local values of window-scroll-functions.

I'm going to try another approach, that of changing the global value
of the variable and having the function iterate over visible windows.
#+end_quote

It's really bizarre.  I can only guess that it's some kind of race condition in Emacs itself.  Maybe this other approach will work around it.

Wait, that can't work, because even the global value of window-scroll-functions causes the functions to be called for each window, not for each redisplay, so iterating over the windows would be nonsensical.

And it still happens: after connecting and the auto-view-rooms are shown, Emacs calls the window-scroll-functions for the non-selected window (i.e. if there are two room windows, it calls the functions for the non-selected one) infinitely, apparently until I scroll the window so its display-start position changes.  It's just bizarre.

So I think the only solution now is to use a global idle timer that iterates over visible windows.  We won't use window-scroll-functions at all, even though that's obviously the more correct solution.

[2022-09-19 Mon 15:08]  I ended up using the iterating global idle timer, and it seems to work fine.
** DONE [#B] Fix membership messages for empty displaynames             :bug:
:PROPERTIES:
:ID:       412d352f-6e66-44dc-9f6f-4c92cc71b176
:END:
:LOGBOOK:
- State "DONE"       from "TODO"       [2022-07-13 Wed 08:18]
:END:

e.g.

#+begin_src elisp
  (((:id . "$Wytz98qICSSS7mYZBBhAPaR8sFX1t8ggp2kaEvpYxCg")
    (:sender . "@user:host")
    (:content
     (avatar_url . "")
     (displayname . "")
     (membership . "join"))
    (:origin-server-ts . 1654019305932)
    (:type . "m.room.member")
    (:state-key . "@user:host")
    (:unsigned
     (replaces_state . "$sQH55CETYW3YC_rjhvygt1bOLQP9gpk6T6OwQpeZo94")
     (prev_content
      (avatar_url . "")
      (displayname . "")
      (membership . "join"))
     (prev_sender . "@user:host"))
    (:receipts)
    (:local))
   ((:id . "$sQH55CETYW3YC_rjhvygt1bOLQP9gpk6T6OwQpeZo94")
    (:sender . "@user:host")
    (:content
     (avatar_url . "")
     (displayname . "")
     (membership . "join"))
    (:origin-server-ts . 1654019104661)
    (:type . "m.room.member")
    (:state-key . "@user:host")
    (:unsigned)
    (:receipts)
    (:local)))
#+end_src

Is displayed as:

#+begin_example
  Membership: 1 joined (); 1 changed name ().
#+end_example

** DONE Sending direct messages
:LOGBOOK:
- State "DONE"       from "PROJECT"    [2022-03-25 Fri 23:14]
-  State "PROJECT"    from              [2021-08-24 Tue 23:04]
:END:

+ [[https://github.com/matrix-org/matrix-react-sdk/blob/21bb8e00ab837fad7ec10be67418f1e83e449d97/src/createRoom.ts#L283][The function that Element uses to find an existing direct room for a user]]

[2022-03-22 Tue 18:00] This almost works, except that when a room is automatically created for a direct message, it is not marked as =m.direct=, so it's not detected as a direct room if the user tries to send another direct message, so a second room is automatically created.  I've tried to follow the spec in putting the direct flag in an =account_data= event, and the HTTP request seems to return 200, but it doesn't seem to have any effect, because the event that I put doesn't show up in the account data.

[2022-03-25 Fri 23:14] It works!

*** DONE Fix marking new direct rooms as direct
:LOGBOOK:
- State "DONE"       from "TODO"       [2022-03-25 Fri 23:14]
:END:

[2022-03-24 Thu 16:05] Found [[https://github.com/matrix-org/matrix-react-sdk/blob/919aab053e5b3bdb5a150fd90855ad406c19e4ab/src/Rooms.ts#L91][this function]] in matrix-react-sdk that does this.  But I've already tried doing that, and it isn't working (the server accepts the PUT request but doesn't seem to "digest" the new event, because it's not seen in subsequent syncs).

[2022-03-25 Fri 21:27] On Thursday at 16:10 I posted this message in =#matrix-dev:matrix.org= (=$A5-ZhuaI3VBT3vmFQXXpowXZ4Rz8v_qBBeAqsPhfGHE=), but I've received no response:

#+begin_quote
Hi, having a minor problem with creating new direct messaging rooms.  The spec says that the clients are responsible for adding a new m.direct event to the account's account_data associating the invitee's ID with the new room's ID.  So that's what I'm trying to do.  The problem is that, even though the PUT request for the account_data returns 200, the new event I'm trying to PUT is not showing up in the account_data: it's not propagated in a new sync event, nor does it appear in a new initial sync, nor does it appear in the PUT request's response (which appears to include the whole m.direct account_data event).  Unfortunately, the spec does not give an example of a properly formed PUT request for an m.direct event, so I could be making a mistake there, but the server response is 200, which would suggest that I'm doing that correctly.  So I'm a bit stumped.  Any help would be appreciated.

Looking at what Element itself sends, it appears that the m.direct event it PUTs does not include only the new room, but also all of the existing content of the account's current m.direct event, with the new room added to it.  However, the spec doesn't indicate that this is necessary, so I guessed that I only need to send the new user ID and room ID, and that the server would add those to the account's existing m.direct event.  But the server doesn't appear to be doing either: it's not replacing the m.direct event with the one I'm sending, nor is it adding the content of the one I'm sending to the existing account data event.  But it is responding with HTTP 200, implying that there is no error.  So...yeah...stumped.  :)

So at this point, I've done my best to imitate Element's behavior in PUTting the m.direct account_data event, and the server seems to accept it, but the event content I send is not returned by the server on subsequent syncs.  So I don't seem to be able to mark rooms as direct message rooms.  I've even found this function in the react SDK that does the same thing: https://github.com/matrix-org/matrix-react-sdk/blob/919aab053e5b3bdb5a150fd90855ad406c19e4ab/src/Rooms.ts#L91  And I've tried doing the equivalent in my client, but it seems to have no effect on the m.direct event later returned by the server.
#+end_quote

[2022-03-25 Fri 23:14] Silly me, the problem was that I forgot to set the HTTP method to PUT on the request.

** DONE Inviting users to rooms
:LOGBOOK:
- State "DONE"       from "PROJECT"    [2022-03-24 Thu 17:25]
:END:

[2022-03-22 Tue 18:00] This works now.  Will merge soon.

** DONE [#B] Replies
:LOGBOOK:
- State "DONE"       from "PROJECT"    [2021-09-27 Mon 00:58]
-  State "PROJECT"    from "TODO"       [2020-12-02 Wed 14:45]
:END:

*** DONE Replies with quoted parts
:LOGBOOK:
- State "DONE"       from "TODO"       [2021-09-27 Mon 00:58]
:END:

Note that Element doesn't support this; it always displays the whole quoted event, not just the quoted part, so the value of doing this is limited.

*** DONE Simple replies
:LOGBOOK:
- State "DONE"       from "TODO"       [2021-09-27 Mon 00:58]
:END:

i.e. without quoting a specific part.

** DONE [#B] Some displaynames not shown when loading earlier events   :bug:
CLOSED: [2021-07-25 Sun 15:45]
:PROPERTIES:
:ID:       5ec9ae28-b44b-4d95-b0f9-50abeac0dfb2
:END:
:LOGBOOK:
-  State "DONE"       from "PROJECT"    [2021-07-25 Sun 15:45]
-  State "PROJECT"    from              [2020-12-05 Sat 00:14]
:END:

It seems that using lazy loading causes the server to not send membership events for senders when loading earlier messages.  According to [[https://matrix.org/docs/spec/client_server/r0.6.1#id267][the spec for ~/members~]]:

#+BEGIN_QUOTE
Unless include_redundant_members is true, the server may remove membership events which would have already been sent to the client in prior calls to this endpoint, assuming the membership of those members has not changed.
#+END_QUOTE

But these are senders for whom we have not already been sent membership events, neither by ~/sync~ nor by ~/members~, so they would not be redundant, so it shouldn't be necessary to enable redundant membership events.  So I don't know if this is a bug in the spec or in the matrix.org server, or if somehow I'm missing something.

I guess it's worth a try to enable redundant membership events for ~/members~.  If that fixes it, then I guess it's a bug in the spec or the server.

I wonder how Element and other clients handle this.  It would seem like the alternative would be to manually request membership data for senders that haven't been seen before, but that would mean having to either wait for that data before inserting earlier messages into a room's buffer, or using a callback and then manually replacing all of the username headers with the proper displayname, which would be awkward, and seemingly ridiculous since the spec indicates that the membership events are supposed to be included when necessary.  (Though I can't imagine how complicated it must be to program this logic on the server side.)

[2020-12-05 Sat 02:19]  I wonder if the ~/members~ response isn't including the membership events because I'm not passing a lazy-load-members filter parameter.  Maybe it's assuming that I'm not using lazy-loading and that I already have all of the member events for the room.

[2020-12-05 Sat 16:37]  I added the default sync filter to the ~/members~ request, but it still isn't returning the membership events for senders of earlier messages.  I guess I'll try enabling the "redundant" option...  

Nope, I still don't receive membership state events for senders of earlier messages, even though I set ~include_redundant_members~ to true in both the StateFilter and the RoomEventFilter.

At this point, I don't know what to do.  I may have to ask someone about the spec...sigh...

[2020-12-05 Sat 17:12]  Found these issues that seem related, but I can't find a solution in them.

+  [[https://github.com/matrix-org/matrix-doc/pull/1758][Spec lazy_load_members and include_redundant_members by KitsuneRal · Pull Request #1758 · matrix-org/matrix-doc · GitHub]]
+  [[https://github.com/vector-im/element-web/issues/7211#issuecomment-419668549][LL members can get out of sync with server on limited sync response · Issue #7211 · vector-im/element-web · GitHub]]
+  [[https://github.com/vector-im/element-web/issues/7303][State is incomplete on joining a room with LL · Issue #7303 · vector-im/element-web · GitHub]]
+  [[https://github.com/matrix-org/matrix-doc/pull/1758][Spec lazy_load_members and include_redundant_members by KitsuneRal · Pull Request #1758 · matrix-org/matrix-doc · GitHub]]
+  [[https://github.com/matrix-org/matrix-doc/pull/2035][Spec lazy-loading room members by turt2live · Pull Request #2035 · matrix-org/matrix-doc · GitHub]]

There's also this Google Doc about the spec proposal: [[https://docs.google.com/document/d/11yn-mAkYll10RJpN0mkYEVqraTbU3U4eQx9MNrzqX1U/edit#heading=h.q5mz9uiufb2g][Proposal for lazy-loading room members to improve initial sync speed and client RAM usage - Google Docs]].  It says:

#+BEGIN_QUOTE
When returning a /sync or /messages response, the server includes a state block (similar to that seen in an initial /sync) to provide the membership info about the senders of the events in the timeline segment being synced.
#+END_QUOTE

But it doesn't seem to be doing that.

I guess I'll look for that Matrix client developer room and see if anyone in there can help...  I can't find such a room with Element.  I guess I'll try the Matrix Spec room, assuming that still exists...  That one says it's about specific proposals, so I guess I'll try the Matrix HQ room...

[2020-12-05 Sat 17:22]  I [[https://matrix.to/#/!OGEhHVWSdvArJzumhm:matrix.org/$FH17k_CQD4hl9a7VMtdU5KQRCHf6A-Io2tQe5X_xlNY?via=matrix.org][sent]] this message in it:

#+BEGIN_QUOTE
Hi, I'm trying to implement lazy-loading in my client, and I've found that, when I retrieve earlier messages using /messages, the server doesn't seem to send membership state events for senders that were not in the initial sync.  I've looked up what seem to be the related issues on the repo, and I've looked at the spec proposal, and it seems to say that the server should be sending them.  I'm setting lazy_load_member to true for both the RoomEvent and State filters, and I've also tried setting include_redundant_members in both filters, and it makes no difference.  Is the server not behaving according to the spec?  Or am I missing something?  Am I supposed to manually fetch membership data for newly seen senders?
#+END_QUOTE

[2020-12-05 Sat 17:44]  Someone suggested I ask in =#matrix-dev:matrix.org=, the channel I was unable to find.

[2020-12-05 Sat 17:47]  Something weird: In the current retro callback, the state events are currently coded to push the raw alists rather than event structs (which is not the right thing to do), but after loading earlier messages, every element of the room's state list is an event struct.  That would suggest that this code isn't doing anything:

#+BEGIN_SRC elisp
  (cl-loop for event across state
           ;; FIXME: Need to use make-event
           do (push event (ement-room-state room)))
#+END_SRC

Which would suggest that the ~state~ variable is nil there, which doesn't make sense...  Sure enough, the ~state~ key in the ~/messages~ response is nil.  That doesn't make sense...

[2020-12-05 Sat 18:20]  Wow, in every response to ~/messages~, there is no ~state~ key, and I see ~m.room.member~ events in the ~chunk~!  That is not according to the spec!  ...Yes, it appears that all the membership events, including the ones with the displaynames, are in the ~chunk~!  The [[https://matrix.org/docs/spec/client_server/r0.6.1#id267][spec says]] that the ~state~ parameter includes:

#+BEGIN_QUOTE
state	[RoomStateEvent]  A list of state events relevant to showing the chunk. For example, if lazy_load_members is enabled in the filter then this may contain the membership events for the senders of events in the chunk.
#+END_QUOTE

And it says that ~RoomStateEvent~ includes the parameters like ~prev_content~, which I'm seeing in the membership events in ~chunk~.  It also says that ~chunk~ is a list of ~RoomEvent~, which are /not/ listed as including ~prev_content~.  So it seems that the server is sending the membership events in the wrong parameter!  I guess this gives me a better question to ask in the dev channel...

[2020-12-05 Sat 18:32]  [[https://matrix.to/#/!jxlRxnrZCsjpjDubDX:matrix.org/$2appXOe87ge7JrECqZMQRY6nobsxdS0WSUFyRdRNdjY?via=matrix.org&via=interpont.com&via=cervoi.se][Sent]] this message in that channel:

#+BEGIN_QUOTE
Hi, I've been implementing lazy-loading support in my client, and I seem to be seeing a response from the server that is not according to the [[https://matrix.org/docs/spec/client_server/r0.6.1#id267][spec]] for ~/messages~: The spec says that the ~state~ parameter is a list of ~RoomStateEvent~ objects, and the ~chunk~ parameter is a list of ~RoomEvent~ objects.  But in the response I'm getting from the server, the ~state~ parameter is not present, and the ~chunk~ parameter includes ~RoomStateEvent~ events, such as ~m.room.member~, which, e.g. have ~prev_content~ keys, which would make them ~RoomStateEvent~ objects according to the spec.  Am I missing something, or is the matrix.org server not behaving according to spec?
#+END_QUOTE

To make it all extra confusing, the example response in the spec does not have a ~state~ key, and it includes an ~m.room.name~ event in the ~chunk~!

[2020-12-05 Sat 18:41]  Well, I don't know if I'll get a response anytime soon, if ever.  So I guess, for now at least, I have to work around it by adding events that are not  ~m.room.message~ events to the state list myself.

[2020-12-05 Sat 18:54]  Well, I thought that if I did that, it would fix the problem.  But now that I've written the code for that, I'm not actually seeing those events in the chunk, so I'm still not getting the membership events when loading earlier messages.

[2020-12-05 Sat 18:57]  It appears that I wrote that code on master and forgot I had the attempted fix on ~wip/lazy-retro~.  So let's try it on the right branch...  Still not seeing any ~m.room.member~ events in the ~chunk~.  What is going on?!

[2020-12-05 Sat 19:08]  I can no longer find any non- ~m.room.message~ events in ~chunk~ in the ~/messages~ responses.  I have no explanation for any of this.

[2020-12-05 Sat 19:40]  Well, I'm about out of ideas.  I just [[https://matrix.to/#/!jxlRxnrZCsjpjDubDX:matrix.org/$2hcPB3Og6spKfEsh0yRr3_uMxrf-qpkRfZr_7ldgiUc?via=matrix.org&via=interpont.com&via=cervoi.se][posted]] this to that room:

#+BEGIN_QUOTE markdown
Well, this is very strange: I can no longer find `RoomStateEvent` events in the `chunk` parameter.  I don't know what I did to cause that.  But the ultimate problem I've been trying to solve remains: When I'm using lazy-loading, and I request `/messages`, and some of those messages are from senders that were not in the initial `/sync`, I do not receive any `RoomStateEvent` events for those senders, such as their `m.room.member` events, and, in fact, the `state` parameter in the response is always missing.  I need these membership events so I can show the senders' displaynames, and the spec says that they should be sent by the server for senders whose membership events haven't been sent to me yet.  Even when I set `include_redundant_members` to `true`, the server still doesn't send anything in `state`.  AFAICT the server is not behaving according to the spec, but I hope I'm missing something.
#+END_QUOTE

I don't know what else to do, other than to not use lazy-loading, which would be awful to go back to.  And manually requesting membership data and iterating over the messages in the buffer to fix them would be pretty awful too.

[2020-12-05 Sat 19:51]  Digging into the ~matrix-js-sdk~ tests, it looks like even [[https://github.com/matrix-org/matrix-js-sdk/blob/04bbfae08e3e8fe9d329b2f950c4f86545a3cfea/spec/integ/matrix-client-room-timeline.spec.js#L230][their own code]] doesn't expect a ~state~ parameter, and it just uses ~chunk~.

[2020-12-05 Sat 19:55]  Oh, great, I see [[https://github.com/matrix-org/matrix-js-sdk/blob/5993dd588c697ff8f5b9ca87616f038c886aac56/src/client.js#L4037][this comment]] in their ~/messages~ fetching code:

#+BEGIN_SRC js
  // XXX: it's horrific that /messages' filter parameter doesn't match
  // /sync's one - see https://matrix.org/jira/browse/SPEC-451
#+END_SRC

That issue is now at https://github.com/matrix-org/matrix-doc/issues/706, which has not been closed.  The original description:

#+BEGIN_QUOTE
Superficially /messages and /sync both take filter params. Except /sync is a 'filter collection' (which may be either an ID or a blob of JSON, and is also known as a 'filter'), whereas /messages takes a 'filter component' as a blob of JSON (sometimes called a 'filter'). At the very least, the params should be named differently, and the whole naming convention should be untangled.
#+END_QUOTE

So I don't know if that's causing the problem.  But Matthew even [[https://github.com/matrix-org/matrix-doc/issues/706#issuecomment-418191755][says]] (Sep 3, 2018):

#+BEGIN_QUOTE
this continues to bite me constantly (esp with LL)
#+END_QUOTE

I guess if I don't get a response in the chat room, I'll file an issue.  But I don't know if it's a bug in the spec, or the server, or both.

But their own JS code (not the test spec) [[https://github.com/matrix-org/matrix-js-sdk/blob/5993dd588c697ff8f5b9ca87616f038c886aac56/src/client.js#L4149][seems to look for a ~state~ parameter]]:

#+BEGIN_SRC js
        promise.then(function(res) {
            if (res.state) {
                const roomState = eventTimeline.getState(dir);
                const stateEvents = utils.map(res.state, self.getEventMapper());
                roomState.setUnknownStateEvents(stateEvents);
            }
            const token = res.end;
            const matrixEvents = utils.map(res.chunk, self.getEventMapper());
            eventTimeline.getTimelineSet()
                .addEventsToTimeline(matrixEvents, backwards, eventTimeline, token);
#+END_SRC

I wonder what ~roomState.setUnknownStateEvents~ does.

Anyway, here's what I currently understand to be the case:

+  The spec says that, when calling ~/messages~ with a lazy-loading filter, the response should include a ~state~ parameter, and it should include membership events for senders in the ~chunk~ parameter for whom membership events have not yet been sent.
+  In practice, ~/messages~ responses never have a ~state~ parameter set, and the ~chunk~ parameter does not include membership events, either (although at one point in my testing, I seemed to find some membership events in a ~chunk~, but later I couldn't reproduce that behavior).
+  The JS SDK's test spec does not appear to expect or test for a ~state~ parameter in ~/messages~ responses.
+  The JS SDK's code appears to use the ~state~ parameter when it's in the response, but it's not clear what it does with such events.
+  I don't know how the JS SDK handles getting displaynames for senders that were not in the initial sync.  Does it work around the fact that the server appears to violate the spec?  (The JS code is very complicated, and the codebase is labyrinthine, so I have little enthusiasm for digging deeper into it.)

So as best I can tell, the server is violating the spec.

[2021-07-25 Sun 14:12]  After carefully digging into the raw events, reviewing these notes, and talking with Michael (t3chguy) in =#matrix-dev:matrix.org=, I found that I was sending =/messages= the kind of filter that =/sync= expects, rather than the =RoomEventFilter= that is called for. (Actually, I wasn't sending =/messages= any filter before now, and then today I started by sending it the wrong kind.) After fixing that, finally, loading earlier messages gets the membership events for newly seen users, and the displaynames are seen!  Finally this can be put to rest.

** DONE [#C] Send Org-formatted messages
:LOGBOOK:
- State "DONE"       from "PROJECT"    [2021-09-27 Mon 00:58]
-  State "PROJECT"    from "TODO"       [2020-12-02 Wed 14:46]
:END:
* Reference

** [[https://lists.gnu.org/archive/html/emacs-devel/2022-05/msg01224.html][emacs-devel: print-circle, and backtraces containing circular structures causing infinite loop/out-of-memory]]

My thread on emacs-devel about using ~print-circle~ to prevent this problem.

